networks:
  proxy:
    name: backbone_proxy
    external: true
  monitoring:
    name: backbone_monitoring
    external: true

secrets:
  acme_key:
    environment: ACME_KEY
  acme_secret:
    environment: ACME_SECRET
  acme_consumer_key:
    environment: ACME_CONSUMER_KEY

services:
  proxy:
    image: traefik:v3.1.6
    restart: always
    container_name: reverse_proxy
    command:
      # OVH DNS-01 ACME resolver setup
      - "--certificatesresolvers.ovhdns.acme.email=${LETSENCRYPT_MAIL}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=backbone_proxy
      - traefik.http.routers.dashboard.ruleSyntax=v3
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.entryPoints=https
      - traefik.http.routers.dashboard.rule=Host("${APPLICATION_FQDN}") && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.dashboard.service=api@internal
      - prometheus.scrape=true
      - prometheus.port=8080
    environment:
      OVH_ENDPOINT: ${OVH_ENDPOINT:-ovh-eu}
      OVH_APPLICATION_KEY_FILE: /run/secrets/acme_key
      OVH_APPLICATION_SECRET_FILE: /run/secrets/acme_secret
      OVH_CONSUMER_KEY_FILE: /run/secrets/acme_consumer_key
    ports:
      - "80:80"
      - "443:443" 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/conf/:/etc/traefik/:ro"
      - "./traefik/certs:/etc/certs:ro"
      - "./traefik/acme/:/var/traefik/acme/"
    secrets:
      - acme_key
      - acme_secret
      - acme_consumer_key
    networks:
      - proxy
      - monitoring
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 3s
      retries: 30
